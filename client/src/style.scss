// Import the modules 'map' to use map functions
@use "sass:map";

$theme-map: null; //! Replaces former use of '!global' to declare a new variable, which is deprecated

// Reset CSS
*,
::before,
::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

// Set base font size for rem units
html {
  font-size: 62.5%;
}

body {
  font-family: Arial, sans-serif;
}

a {
  text-decoration: none;
}

// Define dark/light mode variables
$themes: (
  light: (
    iconColor: black,
    navBg: #8bd1e3,
    logo: #08415c,
    bg: white,
    bgSoft: #f6f3f3,
    textColor: #333,
    textColorSoft: #555,
    border: #08415c,
    hr: #8bd1e3,
    errorMsg: #f75252,
  ),
  dark: (
    iconColor: white,
    navBg: black,
    logo: white,
    bg: #222,
    bgSoft: #333,
    textColor: whitesmoke,
    textColorSoft: lightgray,
    border: #444,
    hr: #444,
    errorMsg: lightgray,
  ),
);

// Mixin to generate theme-specific styles (dark/light mode functions)
@mixin themify($themes) {
  @each $theme, $map in $themes {
    .theme-#{$theme} & {
      $theme-map: (

      ) !global; //! Otherwise, as $theme-map is defined locally in a scope block, themed($key) wouldn't be able to access it

      @each $key, $submap in $map {
        $value: map.get($map, $key);
        $theme-map: map.merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
    }
  }
}

// Function to retrieve themed values
@function themed($key) {
  @return map.get($theme-map, $key);
}

// Media query mixins for responsive design
@mixin medium {
  @media (max-width: 1150px) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: 992px) {
    @content;
  }
}

@mixin small {
  @media (max-width: 600px) {
    @content;
  }
}

@mixin xsmall {
  @media (max-width: 425px) {
    @content;
  }
}

// Mixins for handling animations
@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}

@mixin animate($animation, $duration, $method, $times) {
  & {
    // Update for Sass 2024+
    animation: $animation $duration $method $times;
  }
}
